Prompt: what python libraries can be used to host http server and run a wabpage on it. give me a sample

Answer:

You can easily host an HTTP server in Python using the built-in `http.server` module, or you can use more advanced libraries such as `Flask` for additional features like handling dynamic content.

### Option 1: Simple HTTP Server (using `http.server`)

This is the easiest way to serve a static webpage from a directory using Python's built-in HTTP server:

```python
import http.server
import socketserver

PORT = 8000

# Create a simple handler to serve files from the current directory
Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print(f"Serving at port {PORT}")
    httpd.serve_forever()
```

- This will serve any static files (e.g., HTML, CSS, JS) from the directory you run the script in. 
- Open your browser and visit `http://localhost:8000` to see the hosted page.

### Option 2: Flask (for dynamic content)

If you want more control over routes and content generation, Flask is a good option.

1. Install Flask:
   ```bash
   pip install Flask
   ```

2. Sample Flask Application:

```python
from flask import Flask, render_template

app = Flask(__name__)

# Define route to serve a simple HTML page
@app.route('/')
def home():
    return """
    <html>
    <body>
        <h1>You have been hacked!!!</h1>
        <p>This is an educational example for hosting a webpage on a Python server.</p>
    </body>
    </html>
    """

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
```

- This code will host a simple HTML page at `http://localhost/`. 
- You can modify the HTML inside the `home()` function to include your custom message.

### Key Differences:
- **`http.server`** is simpler and mainly for serving static files.
- **`Flask`** allows for dynamic routes and more complex server-side logic if needed.